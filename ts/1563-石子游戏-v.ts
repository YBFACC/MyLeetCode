//copy--2ç»´dp
function stoneGameV(stoneValue: number[]): number {
  const N = 7
  const s = Array.from({ length: N }, () => new Int32Array(N))
  const g = Array.from({ length: N }, () => new Int32Array(N))
  const f = Array.from({ length: N }, () => new Int32Array(N))
  const mxl = Array.from({ length: N }, () => new Int32Array(N))
  const mxr = Array.from({ length: N }, () => new Int32Array(N))
  const n = stoneValue.length


  for (let i = 0; i < n; i++) {
    s[i][i] = stoneValue[i];
    g[i][i] = i;
    for (let j = i + 1; j < n; j++) {
      s[i][j] = s[i][j - 1] + stoneValue[j];
      let now = g[i][j - 1];
      while (s[i][j] - s[i][now] > s[i][now]) {
        now++;
      }
      g[i][j] = now;
    }
  }

  for (let len = 1; len <= n; len++) {
    for (let l = 0; l + len - 1 < n; l++) {
      let r = l + len - 1;
      let mid = g[l][r];
      let ls = s[l][mid];
      let rs = s[mid + 1][r];
      if (ls == rs) {
        f[l][r] = Math.max(f[l][r], mxl[l][mid]);
        f[l][r] = Math.max(f[l][r], mxr[mid + 1][r]);
      } else {
        if (mid > l) {
          f[l][r] = Math.max(f[l][r], mxl[l][mid - 1]);
        }
        if (mid < r) {
          f[l][r] = Math.max(f[l][r], mxr[mid + 1][r]);
        }
      }
      let v = f[l][r] + s[l][r];
      if (l == r) {
        mxl[l][r] = mxr[l][r] = v;
      } else {
        mxl[l][r] = Math.max(v, mxl[l][r - 1]);
        mxr[l][r] = Math.max(v, mxr[l + 1][r]);
      }
    }
  }
  return f[0][n - 1];
};
//18
console.log(stoneGameV([6, 2, 3, 4, 5, 5]))

//1103936
console.log(stoneGameV([62008, 269055, 379802, 503405, 589774]))

console.log(stoneGameV([39994, 3, 4, 10000, 10000, 10000, 10000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000]))
